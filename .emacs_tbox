;;(shell-command-to-string (concat "sh -c '. /proj/tecsas-scratch/var/tbox/sessions/" user-login-name "_0.lock; echo ${TBOX_HOST}-tb${TBOX_INSTANCE}'"))
(defvar tbox-session nil)
(defvar tbox-host nil)
(defvar tbox-container-session nil)

(defun init-tbox-parameters ()
  (interactive)
  (message "Init TBOX parameters.")
  (let* ((session (determine-session)))
    ;; "<Session> (<host>)"
    (setq tbox-session (my-string-match "^\\([0-9]+\\)" session 1))
    (setq tbox-host (my-string-match "^[0-9]+ (\\([^)]+\\)" session 1)))
  (message "Checking if container.")
  (if (not (string-match "Command not found" (tbox-cmd-to-string "which kubectl")))
      (setq tbox-container-session tbox-session))
  (message nil))

(defun tbox-session ()
  (if (not tbox-session)
      (init-tbox-parameters))
  tbox-session)

(defun session-data-to-string (session-data)
  (let* ((session (my-string-match "TBOX_SESSION=\\([0-9]+\\)" session-data 1))
         (host    (my-string-match "TBOX_HOST=\\(.+\\)$" session-data 1))
         (instance (my-string-match "TBOX_INSTANCE=\\([0-9]+\\)" session-data 1)))
    (concat session " ("(concat host "-tb" instance) ")")))

(defun determine-session ()
  (interactive)
  (let* ((session-data (shell-command-to-string "echo -n `grep -l -e \"$GSN_WS_NAME\"$ /proj/tecsas-scratch/var/tbox/sessions/\"$USER\"_*.lock`|xargs cat $1"))
         (sessions (if (string-match "No such file" session-data)
                       nil
                     (mapcar #'session-data-to-string (split-string session-data "TBOX_CMD" t)))))
    (if (not sessions)
        (error "no-session")
    (if (> (length sessions) 1)
        (completing-read "Select TBOX Session: " sessions nil t)
      (car sessions)))))

(if (null explicit-shell-file-name)
    (setq-default explicit-shell-file-name shell-file-name))
(require 'tramp)
(add-to-list 'tramp-methods
             `(,"tbox"
               (tramp-login-program      ,"/proj/sgsn-tools/tbox/bin/tbox")
               (tramp-login-args         (,nil ("--connect") ("--session=%h") ("%h")))
               (tramp-remote-shell       "/bin/sh")
               (tramp-remote-shell-args  ("-i" "-c"))))

(add-to-list 'tramp-methods
             `(,"tbox-pod"
               (tramp-login-program      ,"/proj/sgsn-tools/tbox/bin/tbox")
               (tramp-login-args
                (,
                 nil
                 ("--connect")
                 ("--session=%h")
                 ("%h")
                 ("-cmd" "\"kubectl exec -it %u sh\"")
                 ))
               (tramp-remote-shell       "/bin/sh")
               (tramp-remote-shell-args  ("-i" "-c"))))

(defconst tbox-pod-completion-function-alist
  '((tbox-pod-completions "")))

(defun tbox-pod-completions (ignore)
  (cl-loop for name in (get-tbox-pods)
           collect (list ""  (concat name "@" (tbox-session)))))

(tramp-set-completion-function "tbox-pod" tbox-pod-completion-function-alist)

(defun make-tbox-cmd-list (cmd &optional startfile)
  (list "/proj/sgsn-tools/tbox/bin/tbox" startfile "-connect" "-nox11" "-session" (tbox-session) "-q" "-cmd" cmd))

(defun make-tbox-cmd (cmd &optional startfile)
  (mapconcat 'identity (make-tbox-cmd-list cmd startfile) " "))

(defun tbox-cmd-to-string (cmd)
  (shell-command-to-string (make-tbox-cmd (concat "'" cmd "'"))))

(defun get-tbox-screens ()
  (let ((screen-output (tbox-cmd-to-string "/local/tecsas/3pp/bin/screen -list"))
        (start 0)
        (screens (list)))
    (while (string-match "-tb[0-9]+_\\([^ 	]+\\)" screen-output start)
      (setq screens (append (list (match-string 1 screen-output)) screens))
      (setq start (match-end 1)))
    screens))

(defvar screen--history-list nil
  "History list for 'attach-tbox-screen'.")
(defun attach-tbox-screen ()
  (interactive)
  (let* ((screens (get-tbox-screens))
         (screen (completing-read "Screen: " (append (list "all") screens)  nil nil nil 'screen--history-list "all")))
    (if (equal screen "all")
        (dolist (screen screens) (tbox-screen screen))
      (tbox-screen screen))))

(defvar tbox-pods nil)
(defun get-tbox-pods ()
  (if tbox-pods
      tbox-pods
    (let ((cmd-output (tbox-cmd-to-string "kubectl get pods -o name"))
          (start 0)
          (pods (list)))
      (while (string-match "^pod/\\(.+\\)$" cmd-output start)
      (setq pods (append (list (match-string 1 cmd-output)) pods))
      (setq start (match-end 1)))
      (setq tbox-pods pods))))

(defun get-pod (regexp)
  (car (cl-member regexp (get-tbox-pods) :test #'string-match)))

(defun get-ncb-pod ()
  (get-pod "controller-[0-9]"))

(defun get-yang-pod ()
  (get-pod "-yang"))

(defun get-pod-ip (pod)
  (let ((tbox-result (tbox-cmd-to-string (concat "kubectl describe pod " pod " | /usr/bin/grep IP"))))
    (if (string-match ".*IP: *\\(.+\\)$" tbox-result)
        (match-string 1 tbox-result))))

(defun get-yang-ip ()
  (get-pod-ip (get-yang-pod)))

(defvar tbox-pods--history-list nil
  "History list for 'connect-tbox-pod'.")
(defun connect-tbox-pod ()
  (interactive)
  (let* ((pods (get-tbox-pods))
         (pod (completing-read "Pod: " (append (list "*Refresh*" "all") pods)  nil nil nil 'tbox-pods--history-list "all")))

    (cond ((equal pod "*Refresh*")
           (setq tbox-pods nil)
           (connect-tbox-pod))
          ((equal pod "all")
           (dolist (pod pods) (tbox-pod-term pod)))
          (t
           (tbox-pod-term pod)
           ))))

(defun tbox-pod-term (pod &optional historyfile) 
  (interactive)
  (tbox-make-term pod (concat "kubectl exec -it " pod " tcsh"))
  (cd (concat "/tbox-pod:" pod "@" (tbox-session) ":/")))

(defvar ncb-ip "172.16.4.146")
(defun tbox-fix-ncb ()
  "Determines IP of active NCB"
  (interactive)
  (let* ((ip1 "172.16.4.146")
         (ip2 "172.16.4.242")
         (cmd (concat "ssh -o SendEnv=EMACS_SH -t -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/DPE_ROOT/TECSAS/wrl/piu_priv_key root@" ip1 " gsh get_active_ncb"))
         (gsh_output (tbox-cmd-to-string cmd)))
    (if (or (string-match "EquipmentId:" gsh_output) (string-match "CLI is currently not available" gsh_output))
        (setq ncb-ip ip1)
      (setq ncb-ip ip2))))

(defun tbox-make-comint (name program &optional is-ncb startfile)
  (let* ((program (if (equal "screen" program)
                      "/local/tecsas/3pp/bin/screen -d -r -S eselnlx1465-tb42_GTT -e^ad"
                    program))
         (cmd (if is-ncb
                  (make-ncb-command program)
                (concat "\"" program  "\""))))
    (apply 'make-comint (append (list name) (make-tbox-cmd-list cmd startfile)))))

(defun make-ncb-command (program)
  (if (not (equal tbox-container-session tbox-session))
      (progn
        (tbox-fix-ncb)
        (concat "\"ssh -o SendEnv=EMACS_SH -t -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/DPE_ROOT/TECSAS/wrl/piu_priv_key root@" ncb-ip " " program "\""))
    (if (equal program "erl")
        (setq program "/tmp/DPE_SC/LoadUnits/ttx/int/bin/to_erl"))
    (concat "\"kubectl exec -it " (get-ncb-pod) " " program "\"")))

(defun tbox-make-term (name program &optional is-ncb startfile historyfile &rest switches)
  (let* ((term-buffer-name (make-process-buffer-name name))
         (cmd (if is-ncb
                  (concat "\"ssh -o SendEnv=EMACS_SH -t -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/DPE_ROOT/TECSAS/wrl/piu_priv_key root@" ncb-ip " " program)
                (concat "\" " program)))
         (cmd (if (not switches) 
                  cmd
                (dolist (switch switches cmd) (setq cmd (concat cmd  " " switch)))))
         (cmd (concat cmd "\"")))
    (if (get-process name)
        (switch-to-buffer term-buffer-name)
      (apply 'make-term (append (list name) (make-tbox-cmd-list cmd startfile)))
      (switch-to-buffer term-buffer-name)
      (compilation-shell-minor-mode 1)
      (setq compilation-scroll-output nil)
      (my-term-shell-mode-hook)
      (local-set-key [(control backspace)] 'my-send-backspace)
      (local-set-key [(control tab)] 'dabbrev-expand)
      (local-set-key [return]        'my-compile-goto-error)
      ;;(add-function :before (process-filter (get-process name)) #'(lambda (proc str) (my-tbox-strip-cshrc-echos str)))
      ;;  (add-function :filter-return (local 'eshell-post-rewrite-command-function)
      ;;                #'eshell--apply-redirections))
      ;;(add-function :override (process-filter process)
      ;;              #'gud-tooltip-process-output)
      ;;(comint-mode)
      ;; There is no term-preoutput-filter-functions...
      ;;(add-hook 'term-preoutput-filter-functions 'my-tbox-strip-cshrc-echos nil t))))
      (if (and historyfile (file-readable-p historyfile))
          (progn
            (make-local-variable 'term-input-ring-file-name)
            (setq term-input-ring-file-name historyfile)
            (term-read-input-ring)
            ))
      ;;(setq term-prompt-regexp "^[^<>=,]*> ?")
      (setq term-prompt-regexp "^\\([^<>=,]*> ?\\|==.+ # \\)")
        ;;;;Don't use compilation
      ;;(make-local-variable 'inferior-erlang-use-cmm)
      ;;(setq inferior-erlang-use-cmm nil)
      ;;(erlang-shell-mode)
      ;;(if (and historyfile (file-readable-p historyfile))
      ;;    (progn
      ;;      (setq-local comint-input-ring-file-name historyfile)
      ;;      (comint-read-input-ring t)))
      ;; Don't complete filename
      (setq-local term-dynamic-complete-functions
                  (append (list 'term-replace-by-expanded-history 'my-send-tab)))
      (setq-local term-scroll-with-delete nil)
      (make-local-variable     'find-tag-default-function)
      (setq-local find-tag-default-function 'my-erlang-find-tag-default)
      (run-at-time 2 nil 'my-term-highlight-all-prompts)
      ;;(setq comint-process-echoes t))))
      )))

;;/local/tecsas/3pp/bin/screen -list
(defun tbox-screen(host_suffix &optional inputname historyfile is-ncb)
  (interactive "sScreen host suffix: ")
  (let* ((name (if inputname inputname host_suffix))
         (screen-name (make-process-buffer-name name))
         (historyfile (if historyfile historyfile "~/.screen_history"))
         )
    (if (get-process name)
        (switch-to-buffer screen-name)
      ;; Make sure tbox-session is initialized
      (tbox-session)
      (let* (
             (host (concat tbox-host "_" host_suffix))
             (screen-cmd  (concat "/local/tecsas/3pp/bin/screen -d -r -S " host " -e^ad")))
        (tbox-make-term name screen-cmd is-ncb nil historyfile inputname)))))

;; Copied from `inferior-erlang-strip-ctrl-m'.
(defun my-tbox-strip-cshrc-echos (&optional string)
  "Strip trailing \"echoes\" from .cshrc"
  (interactive)
  (if (string-match "^\\(]2;\\|Welcome hårdrockarn\\).+$" string)
      ""
    string))

  ;;(if (and (boundp 'comint-last-input-end)
  ;;         (boundp 'comint-last-output-start))
  ;;    (let ((pmark (process-mark (get-buffer-process (current-buffer)))))
  ;;      (save-excursion
  ;;        (goto-char
  ;;         (if (interactive-p)
  ;;             (symbol-value 'comint-last-input-end)
  ;;           (symbol-value 'comint-last-output-start)))
  ;;        (while (re-search-forward "^]2;.+$" pmark t)
  ;;          (replace-match "" t t))))))

(defun is-tbox-session-correct ()
  (not (eq (string-match (getenv "GSN_WS_NAME") (get-tbox-installation)) nil)))

(defun get-tbox-installation()
  (let ((tbox-result (tbox-cmd-to-string "echo $TECSAS_INSTALLATION_ROOT/$GSN_WS_NAME")))
    (if (string-match ".*\\(^/\\(proj\\|local\\|workspace\\).*\\)$" tbox-result)
        (match-string 0 tbox-result)
      nil)))

(defun tbox ()
  (interactive)
  (tbox-make-term "tbox" "tcsh" nil nil "~/.tbox_history")
  ;; tbox can't handle -cmd correctly - i.e. -cmd "sh -c 'export EMACS_SH=t;\tcsh'"
  ;; doesnt't work
  (term-send-string (get-buffer-process (current-buffer)) "setenv EMACS_SH t;\\tcsh\n")
  (cd (concat "/tbox:" (tbox-session) ":/")))
