(add-hook 'find-file-hook 'my-git-hook t)
(add-hook 'dired-after-readin-hook 'my-git-hook t)

(defun my-set-default-magit-log-arguments (extra)
  (if (boundp 'magit-log-arguments)
      (setq magit-log-arguments (append magit-log-arguments extra))
    (let ((default-args (get 'magit-log-mode 'magit-log-default-arguments)))
      (put 'magit-log-mode 'magit-log-default-arguments (append default-args extra))
      (put 'magit-log-select-mode 'magit-log-default-arguments (append default-args extra)))))

(provide 'mygit)

;; Magit settings
(cond ( (require 'magit nil t)

        (require 'magit-blame)
        (require 'magit-ediff)

        ;; Uncertain if this is needed, but at some points commit editor etc ended up in wrong emacs(-server).
        (if (is-unix)
            (setq server-name (format "server%s" (emacs-pid))))

        ;; Seems magit-ediff-resolve has been renamed to magit-ediff-resolve-rest
        (if (not (functionp 'magit-ediff-resolve-rest))
            (defalias 'magit-ediff-resolve-rest 'magit-ediff-resolve))
        (magit-auto-revert-mode -1)
        (my-set-default-magit-log-arguments (list "--no-merges" "--follow"))
        (set-face-foreground 'magit-blame-heading "lightgrey")
        (add-hook 'magit-ediff-quit-hook  'my-ediff-quit t)
        (remove-hook 'magit-ediff-quit-hook 'magit-ediff-restore-previous-winconf)
        (add-hook 'magit-find-file-hook 'my-git-hook t)
        (add-hook 'magit-status-mode-hook 'my-magit-status-mode-hook)
        (add-hook 'magit-log-mode-hook 'my-magit-log-mode-hook)
        (add-hook 'magit-revision-sections-hook (lambda (&optional TAG)
                                                  (interactive)
                                                  (local-set-key [(control tab)] 'magit-section-cycle-diffs)
                                                  (local-set-key [(control return)] 'my-git-show-commit-at-point)
                                                  (local-set-key "\C-c " 'my-git-show-child-commit)
                                                  ))
        (add-hook 'magit-blame-mode-hook 'my-git-blame-check-reload t)
        (global-set-key "\C-xvs" 'magit-status)
        (if (functionp 'magit-status-quick)
            (global-set-key "\C-xvs" 'magit-status-quick))
        (define-key magit-blame-mode-map "e"      'my-git-blame-ediff)
        (define-key magit-blame-mode-map "b"      'magit-blame)
        (define-key magit-blame-mode-map [return] 'my-git-blame-open-version)
        (define-key magit-blame-mode-map [(control return)] 'my-git-blame-open-prior-version)
        ))

(defun my-git-hook (&rest args)
  (when (my-is-in-git)
    (my-git-title)
    (my-git-file-status)

    (if (featurep 'ipa)
        (ipa-load-annotations-into-buffer))

    (local-set-key "\C-xv?"  'magit-log-buffer-file)
    (local-set-key "\C-\M-w" 'my-git-copy-commit)))

(defun my-is-git-shell-command (command)
  (and (featurep 'magit)
                 (my-magit-inside-worktree-p)
                 (string-match "^[	 ]*git\\>" command)
                 (not (string-match "&" command))))

(defun my-magit-inside-worktree-p ()
  ;; Newer magit has added a noerror parameter and throws...
  (condition-case err
      (magit-inside-worktree-p)
    (error
     (if (eq `magit-outside-git-repo (car err))
         nil
       (signal (car err) (cdr err))))))

(defun my-git-file-at-point ()
  (interactive)
  (let* ((file-at-point (magit-current-file))
         (file-at-point (if (not file-at-point) (ffap-string-at-point) file-at-point)))
    file-at-point))

(defun my-git-show-commit-at-point ()
  (interactive)
  (magit-show-commit (magit-commit-at-point)))

(defun my-git-show-child-commit ()
  (interactive)
  (magit-show-commit (car (magit-commit-children magit-buffer-revision-hash))))


(defun my-git-ediff-pred-at-point ()
  (interactive)
  (let* ((file-at-point (my-git-file-at-point))
         (buffer-at-point (get-file-buffer file-at-point)))
    ;;(if (and buffer-at-point (not (verify-visited-file-modtime buffer-at-point)))
    ;;    (with-current-buffer buffer-at-point
    ;;      (revert-buffer)))
    (magit-ediff-show-working-tree file-at-point)))

(defun my-magit-log (revs args)
  "Wrapper of magit log function which differs depending on magit versions."
  (if (functionp 'magit-log-other)
      (switch-to-buffer (magit-log-other revs args))
    (magit-log revs args)))

(defun my-magit-status-mode-hook ()
  (interactive)
  (local-set-key  "e"      'my-git-ediff-pred-at-point)
  (local-set-key  "\C-d"   'my-git-ediff-pred-at-point)
  (local-set-key  "\e\C-d" 'my-git-ediff-other-version-at-point)
  (local-set-key  "\C-e"   'magit-ediff-resolve-rest)
  )

(defadvice magit-insert-unpushed-to-upstream-or-recent
  (before my-magit-insert-unpushed-to-upstream-or-recent ())
  "Advice function to add --no-merges"
  (setq magit-buffer-log-args (add-to-list ' magit-buffer-log-args "--no-merges")))
(ad-activate 'magit-insert-unpushed-to-upstream-or-recent)

(defun my-magit-log-mode-hook ()
  (interactive)
  (local-set-key [return]  'my-git-find-file-at-commit))

(defun my-git-find-file-at-commit ()
  (interactive)
  (let ((commit (magit-commit-at-point)))
    (magit-find-file commit
                     (my-git-get-filename-for-rev (magit-current-file) commit))))

;; Misc functions...
(defun my-get-magit-log-arguments ()
  "Log args are stored differently in different magit versions."
  (if (boundp 'magit-log-arguments)
      magit-log-arguments
    (get 'magit-log-mode 'magit-log-default-arguments)))

(defvar my-git-diff-target nil "Diff target in \"git-diff buffers\"")
(defun my-git-list-changed-files ()
  (interactive)
  (my-git-diff "git-changes" t))

(defun my-git-diff (&optional diff-name baseline-diff)
  (interactive)
  (let* ((other-target (magit-read-branch-or-commit "Compare with:" "origin/master"))
         (other-target (if baseline-diff 
                           (replace-regexp-in-string "\\.+$" "" other-target)
                         other-target))
         (diff-name (if (not diff-name) "git-diff" diff-name))
         (afterdate (if baseline-diff
                        (shell-command-to-string (concat "git log -1 `git merge-base " other-target " HEAD` --format=\"%cd\""))))
         (log-args (if afterdate (append (my-get-magit-log-arguments) (list (concat "--after=\"" afterdate "\""))) (my-get-magit-log-arguments)))
         (diff-target (if baseline-diff
                          (concat other-target "...")
                        (if (string-match "\\." other-target)
                            other-target
                          (concat other-target "..")))))
    (if (get-buffer diff-name)
        (kill-buffer diff-name))
    ;;(magit-log (list (concat baseline "..HEAD")) (append magit-log-arguments  '("--no-merges" "--ancestry-path")))
    (my-magit-log (list (if (string-match "\\." other-target)
                            other-target
                          (concat other-target "..")))
                  log-args)
    (rename-buffer diff-name)
    ;; Avoid buffer beeing re-used for other magit commands
    (setq magit-buffer-locked-p t)
    ;;(set-buffer (generate-new-buffer diff-name))
    ;;(magit-status-mode)
    (goto-char (point-max))
    (read-only-mode -1)
    ;;(setq buffer-read-only nil)
    (insert "\n\n")
    (insert (mapconcat 'identity (magit-changed-files diff-target) "\n"))
    (cd (magit-toplevel))
    (switch-to-buffer diff-name)
    (goto-char (point-min))
    (set (make-local-variable 'my-git-diff-target) diff-target)
    ;; local-set-key is tricky - it's not local buffer - it's local key-map
    ;;(use-local-map (copy-keymap local-function-key-map))
    (use-local-map (copy-keymap (current-local-map)))
    (local-set-key "e" (lambda()
                         (interactive)
                         (if (magit-branch-or-commit-at-point)
                             (magit-ediff-dwim)
                           (magit-ediff-compare (car (magit-split-range my-git-diff-target)) nil (ffap-string-at-point) (ffap-string-at-point)))))
    (local-set-key [S-return] 'my-find-file-at-point)
    (local-set-key [C-return] 'my-find-file-at-point)
    (local-set-key "k"        'kill-all-matching-lines)
    ))

(defun git-man (entry)
  (interactive (list (read-string "git help entry: ")))
  (let ((newbuffer  (concat "*Git Help " entry "*"))
        (this-buffer (get-buffer (buffer-name))))
    (if (not (get-buffer newbuffer))
        (progn
          (man (concat "git-" entry))
          (switch-to-buffer (concat "*Man git-" entry "*") t)
          (rename-buffer newbuffer)
          (switch-to-buffer this-buffer t)))
    (switch-to-buffer-other-window newbuffer)))

(defun is-git-reference ()
  (and (boundp 'magit-buffer-refname) (not (eq magit-buffer-refname nil))))

(defun my-is-in-git ()
  (interactive)
  (let ((my-buffer-name (my-get-buffer-file-name)))
    (or
     (is-git-reference)
     (and my-buffer-name
          (not (eq (vc-working-revision my-buffer-name) nil)))
   )))

(defun my-git-title ()
  (let* ((ver-string (if (is-git-reference)
                         magit-buffer-refname
                       (if (my-is-in-git)
                           (or (and (functionp 'magit-get-current-branch) (magit-get-current-branch))
                               (vc-working-revision (my-get-buffer-file-name)))
                         nil))))
    (cond (ver-string
           (setq frame-title-format ver-string)
           (if (is-git-reference)
               (let ((new-name (concat (file-relative-name magit-buffer-file-name) "@@" ver-string)))
                 (if (get-buffer new-name) (kill-buffer new-name))
                 (rename-buffer new-name)
                 ))
           ))))

(defun my-git-file-status ()
  (cond ( (and (my-is-in-git) (not (is-git-reference)))
          (if (eq (vc-git-state buffer-file-name) 'up-to-date)
              (read-only-mode (not (setq file-checkedout nil)))
            (setq file-checkedout 1)
            )
          (force-mode-line-update)
          )
        )
  )

(defun is-in-my-git-workspace ()
  (let* ((target (my-get-buffer-file-name))
         (gsn_ws_root (getenv "GSN_WS_ROOT"))
         (gsn_git_root (and gsn_ws_root
                            (replace-regexp-in-string (concat "/" (user-login-name) ".*") "" gsn_ws_root)))
         )
    (and
     target
     (my-is-in-git)
     (or (not gsn_ws_root)
         (not (string-match gsn_git_root target))
         (and gsn_ws_root
              (or (not (boundp 'clearcase-setview-viewtag))
                  (string-match (concat "/" clearcase-setview-viewtag "\\(/.+\\)?$") gsn_ws_root))
              (string-match gsn_ws_root target)
              ))
     )))

(defun my-git-get-buffer-file-name (&optional rev)
  (let ((file  (if (buffer-file-name)
                   buffer-file-name
                 ;; This is when visiting another version of a file
                 magit-buffer-file-name))
        (current-rev (if (buffer-file-name) nil magit-buffer-refname))
        )
    (if rev
        (my-git-get-filename-for-rev file rev current-rev)
      file)))

(defun my-git-get-filename-for-rev (file rev &optional current-rev)
  "Tries to determine the name of the file in the specific rev
(to handle renames...)."
  (let* ((current-rev (if current-rev current-rev "HEAD"))
         (file (file-relative-name file (magit-toplevel)))
         (file (if (member file (magit-revision-files rev))
                   ;; File exists in rev
                   file
                 (if (rassoc file (magit-renamed-files rev current-rev))
                     ;; File has been renamed in older rev
                     (car (rassoc file (magit-renamed-files rev current-rev)))
                   ;; Don't know...
                   file
                   ))))
    (concat (magit-toplevel) file)))


(defun my-git-checkout-curr ()
  (cond ( (and (is-in-my-git-workspace)
               (not file-checkedout)
               )
          (read-only-mode -1)
          ;;(setq buffer-read-only nil)
          (setq file-checkedout 1)
          (force-mode-line-update)
          )
        ( file-checkedout
          (error "Already checkedout")
          )
        ( (is-git-reference)
          (error "This is just a reference buffer")
          )
        ( (my-is-in-git)
          (error "Wrong workspace")
          )
        ( t
          (error "Not a GIT File")
          )
        ))

(defun my-git-uncheckout-curr ()
  (interactive)
  (cond ( (is-in-my-git-workspace)
          (if (is-windows)
              (shell-command (concat "copy /Y " buffer-file-name " " buffer-file-name ".keep"))
            (shell-command (concat "\\cp --backup=numbered " buffer-file-name " " buffer-file-name ".keep")))
          (shell-command (concat "git checkout -- " buffer-file-name) nil nil)
          (revert-buffer nil t)
          )))

(defun my-git-get-other-version ()
  (car (magit-ediff-compare--read-revisions (magit-read-branch-or-commit "Other version"))))

(defun my-git-blame-ediff ()
  "Ediff current-buffer against current \"blame\"."
  (interactive)
  (let* ((this-version (my-git-blame-get-commit))
         (other-version (my-git-blame-get-prior-commmit))
         )
    (my-git-ediff-other-version other-version this-version)))

(defun my-git-blame-open-version ()
  "Open \"blame\" version of current-buffer."
  (interactive)
  (my-git-blame-open (my-git-blame-get-commit)))

(defun my-git-blame-open (rev)
  "Open \"blame\" version of current-buffer."
  (interactive)
  (if (not rev)
      (error "No such version"))
  (let ((linenum (1+ (count-lines 1 (point-at-bol)))))
    (my-git-find-other-version rev)
    (goto-char (point-min)) (forward-line (1- linenum))
    (recenter-top-bottom)))

(defun my-git-blame-get-commit ()
  "Wrapper needed since functions differ in different magit versions."
  (if (functionp 'magit-blame-chunk-get)
      (magit-blame-chunk-get :hash)
    (oref (magit-current-blame-chunk) orig-rev)))

(defun my-git-blame-get-prior-commmit ()
  "Wrapper needed since functions differ in different magit versions."
  (if (functionp 'magit-blame-chunk-get)
      (magit-blame-chunk-get :previous-hash)
    (oref (magit-current-blame-chunk) prev-rev)))

(defun my-git-blame-check-reload ()
  "In emacs 28 it seems the oref above needs to be reloaded after
blame mode..."
  (condition-case err
      (my-git-blame-get-commit)
    (error
     ;; Why is load-file needed?
     (load-file "~/.emacs_git")
     (message ".emacs_git reloaded"))))

(defun my-git-blame-open-prior-version ()
  "Open \"blame\" prior version of current-buffer."
  (interactive)
  (my-git-blame-open (my-git-blame-get-prior-commmit)))

(defun my-git-ediff-pred-current-buffer ()
  (interactive)
  (if magit-buffer-revision
      (my-git-ediff-other-version (concat magit-buffer-revision "^"))
    (magit-ediff-show-working-tree (if buffer-file-name buffer-file-name magit-buffer-refname))))

(defun my-git-ediff-other-version (&optional other-version this-version file)
  "Ediff current-buffer with selected version"
  (interactive)
  (let ((this-version (if this-version this-version (if (buffer-file-name) nil magit-buffer-refname)))
        (other-version (if other-version other-version (my-git-get-other-version)))
        )
    (magit-ediff-compare other-version
                         this-version
                         (my-git-get-buffer-file-name other-version)
                         (my-git-get-buffer-file-name this-version))))

(defun my-git-ediff-other-version-at-point ()
  "Ediff file-at-point with selected version"
  (interactive)
  (my-git-ediff-other-version (my-git-get-other-version) nil (my-git-file-at-point)))

(defun my-git-find-other-version (&optional version)
  "Open other version of current file"
  (interactive)
  (let ((version (if version version (my-git-get-other-version))))
    (magit-find-file version (my-git-get-buffer-file-name version))))

(defun my-git-insert-version ()
  "Inserts other version of current file into current buffer"
  (interactive)
  (let* ((other-buffer (magit-find-file-noselect (my-git-get-other-version)
                                                 buffer-file-name)))
         ;;(other-content (with-current-buffer other-buffer (buffer-string))))
    (read-only-mode -1)
    (erase-buffer)
    (insert-buffer-substring other-buffer)
    (kill-buffer other-buffer)))

(defun my-git-find-alternate-version ()
  "Replavce current buffer with other version."
  (interactive)
  (let ((old-buffer (buffer-name)))
    (my-git-find-other-version)
    (kill-buffer old-buffer)))

(defun my-git-expand-file-name-with-version (name)
  (if (and (featurep 'magit) (my-is-in-git))
      (let* ((version (if magit-buffer-revision
                          magit-buffer-revision
                        (if magit-buffer-refname
                            magit-buffer-refname
                          (magit-rev-parse "HEAD"))))
             (gsn_ws_root (getenv "GSN_WS_ROOT"))
             (name (if gsn_ws_root
                       (replace-regexp-in-string gsn_ws_root "$GSN_WS_ROOT" name)
                     name)))
        (replace-regexp-in-string "\\([^@]+\\)\\(@@.+\\)?$" (concat "\\1@@" version) name))
    name))

(defun my-git-copy-commit ()
  (interactive)
  (let ((commit (if magit-buffer-revision
                    magit-buffer-revision
                  (magit-rev-hash "HEAD"))))
    (kill-new (message "%s" commit))))

(defun my-git-fix-messed-up-modtime ()
  "Updates the buffers modtime in case file has been messed up by backup system"
  (interactive)
  (if (or (not (my-is-in-git))
          buffer-read-only
          (not (is-modtime-messed-up)))
      nil
    (set-visited-file-modtime)
    t))

(defun is-modtime-messed-up ()
  "Checks if last decimals of files mtime has been lost by backup system"
  (interactive)
  (and  (not (verify-visited-file-modtime))
        (equal (nth 5 (file-attributes buffer-file-name))
               (nconc (butlast (visited-file-modtime)) (list 0)))))

(defadvice ask-user-about-supersession-threat
  (around my-ask-user-about-supersession-threat (&rest args))
  "Advice function to handle that backup system messes up mtime"
  (if (not (my-git-fix-messed-up-modtime))
      (apply (ad-get-orig-definition 'ask-user-about-supersession-threat) args)))
(ad-activate 'ask-user-about-supersession-threat)

(defvar git-grep-history nil)
(defun git-grep (what)
    "Run git grep on what in current repo."
    (interactive (list (read-shell-command "git grep: " nil 'git-grep-history)))
    (let ((top-dir (magit-toplevel)))
      (my-compilation-start (concat "git grep --full-name -ni \"" what "\" \"" top-dir "\"") 
                            nil
                            (lambda (n) "*git-grep*")
                            'grep-mode)
      (if (not (string-equal "*git-grep*" (buffer-name)))
          (switch-to-buffer-other-window "*git-grep*"))
      (cd top-dir)
      )
)
