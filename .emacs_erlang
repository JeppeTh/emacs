;; Erlang style definition file, .emacs_erlang
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load ".emacs_tbox")

(require 'compile)
(if (< emacs-major-version 22)
    (add-to-list 'compilation-error-regexp-alist
                 '("^\\([^	 :\n]+\\):\\([0-9]+\\):\\([^:]+\\):\\( warning:\\).*" 1 2 nil (4) 1))
  (add-to-list 'compilation-error-regexp-alist 'bt_run)
  (add-to-list 'compilation-error-regexp-alist-alist
               '(bt_run "^\\([^	 :\n]+\\):\\([0-9]+\\):\\([^:]+\\):\\( warning:\\).*" 1 2 nil (4) 1))
;;  (add-to-list 'compilation-error-regexp-alist-alist
               ;;'(bt_run "^\\(\\([^	 :\n]+\\):\\([0-9]+\\):\\([^:]+\\):\\( warning:\\).*\\)\\|\\(\\(^### TestCase[^#\n]+ #+\\)\\|\\(^Testing current_dir: TEST COMPLETE\\).*$\\)" 2 3 nil (5 . 6) 2 (6 compilation-info-face)))
;;               '(bt_run "^\\(\\([^	 :\n]+\\):\\([0-9]+\\):\\([^:]+\\):\\( warning:\\).*\\)\\|\\(^Testing current_dir: TEST COMPLETE.*$\\)" 2 3 nil (5 . 6) 2 (6 compilation-info-face)))
  )

(defvar my-term-keymap nil)
(defvar last-input nil)
(defun my-erlang-complete ()
  (interactive)
  (let ((tag (comint-get-old-input-default)))
    (if (get-buffer "*Completions*")
        (progn
          (kill-buffer "*Completions*")
          (delete-other-windows)))
    (if (or (not tags-table-list)
            (string-match "(" tag))
        nil
      (while (string-match " " tag)
        (setq tag (substring tag (match-end 0))))
      (while (string-match "=" tag)
        (setq tag (substring tag (match-end 0))))
      (while (string-match "(" tag)
        (setq tag (substring tag (match-end 0))))
      (let ((completion (tags-complete-tag tag nil nil)))
        (if (not completion)
            nil
          (if (eq completion t)
              t
            (if (string-match tag completion)
                (insert (substring completion (match-end 0))))
            (if (string= last-input completion)
                (with-output-to-temp-buffer "*Completions*"
                  (display-completion-list (tags-complete-tag completion nil t))))
            (setq last-input completion)))))))

(fset 'shell-kill-line
   [end ?\C-  ?\C-a ?\C-w])


(defun my-erlang-input-filter (str)
  "As default value of `comint-input-filter' but also removes entries 
containing a tab or beginning with a '('."
  (interactive)
  (not (or (string-match "\\`\\s *\\'" str)
           (string-match "	" str)
           (not (eq (string-match "^\(" str) nil)))))

(defun inferior-erlang-strip-ctrl-g (&optional s)
  "Strips `^G'. Duplicated from `inferior-erlang-strip-delete'."
  (interactive)
  (if (and (boundp 'comint-last-input-end)
           (boundp 'comint-last-output-start))
      (save-excursion
        (goto-char
         (if (called-interactively-p 'interactive)
             (symbol-value 'comint-last-input-end)
           (symbol-value 'comint-last-output-start)))
        (while (progn (skip-chars-forward "^\C-g")
                      (not (eq (point) (point-max))))
          (delete-char 1)
          (or (bolp)
              (backward-delete-char 1))))))

(defun my-erlang-send-tab ()
  "Sends a tab to the erlang-shell to get completions on input"
  (interactive)
  (let
      ((current-input (if my-term-shell-mode
                          (term-get-old-input-default)
                        (comint-get-old-input-default))))
    (if (string-match "(" current-input)
        nil
      (my-send-tab))))

(defun my-ring-ref (ring index)
  (and (> (ring-length ring) 0) (ring-ref ring index)))

(defun my-send-tab ()
  "Sends a tab to the shell to get completions on input"
  (interactive)
  (let* ((org-term-fun term-input-sender)
         (org-comint-fun comint-input-sender)
         (used-ring (if my-term-shell-mode term-input-ring comint-input-ring))
         (last-history (my-ring-ref used-ring 0)))
    (condition-case nil
        (progn
          (setq-local term-input-sender (function my-simple-send))
          (setq-local comint-input-sender (function my-simple-send))
          (insert "	")
          (if my-term-shell-mode
              (term-send-input)
            (comint-send-input))
          (run-at-time 0.1 nil 'my-strip-completion-tab)
          (if (not (eq last-history (my-ring-ref used-ring 0)))
              (ring-remove used-ring 0))
          )
      (quit
       nil)
      (error
       nil))
    (setq-local term-input-sender org-term-fun)
    (setq-local comint-input-sender org-comint-fun)
    t
    ))

(defun my-strip-completion-tab ()
  "Removes trailing tabs when no further completion is possible."
  (if (re-search-backward  "\\(	+$\\)" (point-at-bol) t)
      (replace-match "")))

(defun my-simple-send (proc string)
  "As `term-simple-send'/`comint-simple-send' but skips the newline."
  (if my-term-shell-mode
      (term-send-string proc string)
    (comint-send-string proc string)))

(defun my-send-backspace ()
  "Sends a backspace to the shell. Useful when using `my-send-tab' 
for completion since a backspace then must also be sent to the shell."
  (interactive)
  (let ((home-pos (save-excursion (if my-term-shell-mode (term-bol nil) (comint-bol nil)))))
    (if (eq home-pos (point))
        (error "At prompt")
      (let ((proc (get-buffer-process (current-buffer))))
        (process-send-string proc (char-to-string 127))))))

(defun my-send-return ()
  (interactive)
  (let* ((cmd (if my-term-shell-mode
                  (term-get-old-input-default)
                (comint-get-old-input-default)))
         (used-ring (if my-term-shell-mode term-input-ring comint-input-ring))
         (last-history (my-ring-ref used-ring 0))
         )
    (end-of-line)
    (if my-term-shell-mode
        (term-send-input)
      (comint-send-input))
    ;; If beginning of cmd is completed by shell, only the typed arguments
    ;; will be stored in the history. Replace this entry with the complete
    ;; command in that case.
    (if (and (not (string-equal (my-ring-ref used-ring 0) cmd))
             (not (string-equal (my-ring-ref used-ring 0) last-history)))
        (ring-remove used-ring 0))
    ;; Insert cmd as last entry in history in case it been filtered out or
    ;; removed
    (if (not (string-equal (my-ring-ref used-ring 0) cmd))
        (ring-insert used-ring cmd))))

(defun my-erlang-quit ()
  (interactive)
  (inferior-erlang-send-command "")
)

(defun my-erlang-comment-indent ()
  (let ((indent (erlang-calculate-indent)))
    (cond ((null indent)
           (current-indentation))
          ((eq indent t)
           ;; This should never occur here.
           (error "Erlang mode error"))
          ((= (char-syntax (following-char)) ?\))
           (1- indent))
          (t
           indent))))

(defun my-erlang-find-tag-default ()
  "Like `find-tag-default' but temporary changes the syntax for some charcaters to be able to get
the correct default tag e.g. 'Mvrasn-11-6':decode. If changing this syntax
permanently the indentation in Erlang mode would be incorrect."
  (save-excursion
    (modify-syntax-entry ?' "_")
    (modify-syntax-entry ?- "_")
    (modify-syntax-entry ?: "_")
    (let ((default-tag (find-tag-default)))
      (modify-syntax-entry ?' "\"")
      (modify-syntax-entry ?- ".")
      (modify-syntax-entry ?: ".")
      default-tag)))

(defun my-erlang-find-tag-no-apo ()
  "Find default tag without apostrophs"
  (interactive)
  (let* ((tag_with_apo (my-erlang-find-tag-default))
         (ignore (string-match "[^']+" tag_with_apo))
         (tag_no_apo (match-string 0 tag_with_apo)))
    (find-tag tag_no_apo)))

(require 'erlang)
(defvar my-erlang-imenu-generic-expression
  `(
    ;; General function name regexp
    (nil ,(concat "^\??" erlang-atom-regexp "\\s *(") 1)
    ;; Defines and records
    (nil ,"^-\\(define\\|record\\)[ \t]*(\\??\\([a-zA-Z0-9_]+\\>\\|'[^\n]+'\\)" 2)
    ;; Types
    (nil ,"^[ \t]*-\\(type\\|opaque\\)[ \t]*\\([a-zA-Z0-9_]+\\)(" 2))

  "Imenu generic expression for Erlang mode.  See `imenu-generic-expression'.")

;;(defun my-erlang-get-imenu-entry ()
;;  "Like `erlang-get-function-name' but also returns name of macros and records.
;;Used to generate `imenu' entries in erlang mode."
;;  (or  (and (looking-at (concat "^\??" erlang-atom-regexp "\\s *("))
;;            (erlang-buffer-substring (match-beginning 1) (match-end 1)))
;;       (and (looking-at (concat "^-\\(define\\|record\\)[ \t]*(\??\\([a-zA-Z0-9_]+\\>\\)"))
;;            (erlang-buffer-substring (match-beginning 2) (match-end 2)))))

(defconst my-erlang-function-regexp "^ +\\([[:lower:]_0-9]+:\\)?\\([[:lower:]_0-9]+\\) *(")

(defvar my-erlang-man-imenu-generic-expression
  `(
    ;; General function name regexp i Man page for Erlang
    (nil , my-erlang-function-regexp  2)
    )
  "Imenu generic expression for Erlang Man mode.  See `imenu-generic-expression'.")

(add-hook 'Man-mode-hook 
          (lambda () 
            ;;(if saved-erlang-man-function-name
            ;;    (Man-notify-when-ready (current-buffer)))
            (setq imenu-generic-expression my-erlang-man-imenu-generic-expression)
            (setq my-imenu-next-regexp '(concat (my-which-function) "[ 	]*("))
            )
          )

;;(add-hook 'Man-cooked-hook 
;;          (lambda () 
;;            (if saved-erlang-man-function-name
;;                (Man-notify-when-ready (current-buffer)))
;;            )
;;          )
(defun my-erlang-man-follow ()
  (interactive)
  (if (erlang-get-function-under-point)
      ;; erlang-get-function-under-point doesn't really seam to work in man mode.
      (erlang-man-function (nth 1 (erlang-get-function-under-point)))
    (erlang-man-module (thing-at-point 'symbol))))

(defvar saved-erlang-man-function-name nil)

(defadvice Man-notify-when-ready
  (before erlang-man-mode-hook (MAN-BUFFER))
  "Fix so man-mode is using `erlang-man-function'"
  ;; Not verified in case this works for emacs 25...
  (if (string-lessp erlang-version "2.8.4")
      (with-current-buffer MAN-BUFFER
        (if (and (eq (buffer-size) 0) erlang-man-function-name)
            (progn
              (setq saved-erlang-man-function-name erlang-man-function-name)
              (setq erlang-man-function-name nil)
              )
          (if (and (> (buffer-size) 0) saved-erlang-man-function-name)
              (progn
                (Man-mode)
                (setq erlang-man-function-name saved-erlang-man-function-name)
                (setq saved-erlang-man-function-name nil))))))
  (if (and (equal mode-name "Man") erlang-man-function-name)
      (progn
        (local-set-key "m"      'erlang-man-function)
        (local-set-key [return] 'my-erlang-man-follow)
        )))
(ad-activate 'Man-notify-when-ready)


(defadvice Man-bgproc-sentinel
  (after my-notify-man-ready (PROCESS MSG) disable)
  "Fix so man-mode for erlang from emacs 25"
  (if saved-erlang-man-function-name
      (Man-notify-when-ready (process-buffer PROCESS))))

;; Not verfied on emacs 25...
(if (and (> emacs-major-version 24) (string-lessp erlang-version "2.8.4"))
    (ad-enable-advice  'Man-bgproc-sentinel 'after 'my-notify-man-ready))

(defadvice erlang-man-find-function
  (after my-erlang-find-function (BUF FUNC &optional MODULE-NAME))
  "Fix so that also Mod:Fun is found by `erlang-man-find-function'"
  (if erlang-man-function-name
      (if (eq (point) (point-min))
          (if (re-search-forward (concat "^[ \t]+[[:lower:]_0-9]+:" erlang-man-function-name " *(") nil t)
              (recenter))
        (recenter)
        (setq erlang-man-function-name nil)))
  )

(ad-activate 'erlang-man-find-function)

(defun my-erlang-man-dir (subdir)
  "Seems our erlang installation doesn't put man pages below /lib/erlang."
  ;;(concat erlang-root-dir "/lib/erlang/" subdir))
  (concat erlang-root-dir "/" subdir))

(if (string-lessp erlang-version "2.8.4")
    (defalias 'erlang-man-dir 'my-erlang-man-dir))

(defun my-imenu-create-index ()
  "As 'imenu-default-create-index-function' but removes duplicates afterwards"
  (interactive)
  (my-remove-imenu-duplicates (imenu-default-create-index-function)))

(defun my-remove-imenu-duplicates (list)
  "Removes imenu duplicates from Erlang imenu"
  (interactive)
  (let ((orgelement (pop list))
        (newlist nil))
    (while orgelement
      (progn
        (setq list (cl-delete-if (lambda (cell) (equal (car orgelement) (car cell))) list))
        (setq newlist (append (list orgelement) newlist))
        (setq orgelement (pop list))))
    (reverse newlist)))

(defun my-erlang-shell-mode-hook ()
  ; Key Bindings
  (local-set-key [(control backspace)] 'my-send-backspace)
  (local-set-key [(control tab)]       'dabbrev-expand)
  (local-set-key [return]              'my-compile-goto-error)

  ; Variables
  (setq comint-prompt-regexp             "^[^<>=,]*> ?") ; only one space
  (setq comint-input-filter              'my-erlang-input-filter)
  (setq comint-scroll-to-bottom-on-output nil)
  (add-hook 'comint-dynamic-complete-functions 'my-erlang-send-tab t t)
  (add-hook 'comint-output-filter-functions 'inferior-erlang-strip-ctrl-g t t)
  ; Make it possible to run several Erlang-shells
  (make-local-variable     'inferior-erlang-process)
  (make-local-variable     'inferior-erlang-buffer)
  (make-local-variable     'find-tag-default-function)
  (setq find-tag-default-function 'my-erlang-find-tag-default)
  (setq inferior-erlang-buffer (get-buffer (buffer-name)))
  (setq inferior-erlang-process (get-buffer-process inferior-erlang-buffer))

  (set-process-query-on-exit-flag inferior-erlang-process nil))

(defun my-spec-font-lock-matcher (limit)
  (interactive)
  ;;(message "limit set to %s" limit)
  "Fontifies -spec expressions as `font-lock-comment-face"
  ;; search for the begin of the first region
  (when (re-search-forward "^[ \t]*\-spec" limit t)
    (let ((beg (match-beginning 0)) end ; 1st Region
          )
      ;; search for end of region 1
      ;;(if (re-search-forward "[^%]*\\.\\|^[^%]*\\." limit t)
      (if (re-search-forward "^[^%]+\\.[	 ]*\\(%.*\\)*$" limit t)
          (setq end (match-end 0))
        ;; no match -> length of region 1 = 0
        (setq end (point)))
      ;; save the regions
      (store-match-data (list beg end))
      t)))

(eval-when-compile (defvar font-lock-beg) (defvar font-lock-end))
(defun my-font-lock-extend-region ()
  (interactive)
  ;;(message "%s: font-lock-beg:%s font-lock-end:%s" (format-time-string "%T") font-lock-beg font-lock-end)
  (save-excursion
    (let* ((spec-start-regexp "^[ \t]*\-spec")
           (spec-end-regexp "^[^%]+\\.\\([	 ]*%.*\\)?$")
           ;; Check if beginning of a spec is found within region
           (spec-start (progn (goto-char font-lock-beg)
                              (if (re-search-forward spec-start-regexp font-lock-end t)
                                  (match-beginning 0))))
           ;; That spec is only interestin in case it's in the beginning of the region.
           ;; Otherwise we need to search for an end of a spec above it but within region
           (spec-start (if (eq spec-start font-lock-beg)
                           ;; Region is beginning of spec
                           font-lock-beg
                         (if spec-start
                             (progn
                               (goto-char spec-start)
                               (if (re-search-backward spec-end-regexp font-lock-beg t)
                                   ;; Beginning of spec is missing in region
                                   nil
                                 spec-start)))))
           ;; Find the end of a spec above the region - if necessary
           (limit (if spec-start
                      nil
                    (goto-char font-lock-beg)
                    (if (re-search-backward spec-end-regexp nil t)
                        (match-end 0))))
           ;; Search for spec starting above region if necessary
           (spec-start (if spec-start
                           spec-start
                         (goto-char font-lock-beg)
                         (re-search-backward spec-start-regexp limit t)))
           ;; Now find the last spec within region
           (last-spec-start (if (not spec-start)
                                nil
                              (goto-char spec-start)
                              (while (re-search-forward spec-start-regexp font-lock-end t)
                                (goto-char (match-end 0)))
                              (match-beginning 0)))

           ;; Now search for the end of the last spec witin region
           (spec-end (if (not last-spec-start)
                         nil
                       ;; Don't search beyond spec starting after region
                       (goto-char (+ last-spec-start 1))
                       (setq limit
                             (if (re-search-forward spec-start-regexp nil t)
                                 (match-beginning 0)))
                       (goto-char last-spec-start)
                       (re-search-forward spec-end-regexp limit t)))
           )

      (if (and spec-start
               spec-end
               (or (< spec-start font-lock-beg) (> spec-end font-lock-end))
               )
          ;; So we found a spec and it start/ends outside region - lets extend it.
          (progn
            ;;(message "%s: spec-beg:%s spec-end:%s" (format-time-string "%T") spec-start spec-end)
            (if (< spec-start font-lock-beg)
                (setq font-lock-beg spec-start))
            (if (> spec-end font-lock-end)
                (setq font-lock-end spec-end))
            ;;(message "%s: Changed font-lock-beg:%s font-lock-end:%s" (format-time-string "%T") font-lock-beg font-lock-end)
            t)
        ;;(message "%s: No change" (format-time-string "%T"))
        ))))

(defun my-erlang-mode-hook ()
  ; Syntax
; These caused "unbalanced parenthesis" when e.g (Variable > 0)
;  (modify-syntax-entry ?< "(")
;  (modify-syntax-entry ?> ")")

  ; Key Bindings
  (local-set-key "\e."            'my-find-tag)
  (local-set-key [?\C-\M-.]       'find-tag-regexp)
  (local-set-key [?\C-\M-,]       'find-next-tag-regexp)
  (local-set-key "\C-m"           'erlang-man-function)
  (local-set-key [return]         'newline-and-indent)
  (local-set-key "\ee"            'erlang-end-of-clause)
  (local-set-key "\ea"            'erlang-beginning-of-clause)
  (local-set-key "\C-c\C-k"       'my-compile-test-module)
  (local-set-key "\C-t"           'my-run-test-case)
  (local-set-key "\C-xt"          'my-run-suite)
  (local-set-key "\C-xa"          'my-run-all)

  (define-key esc-map "\e."       'my-erlang-find-tag-no-apo)

  (make-local-variable     'find-tag-default-function)
  (setq find-tag-default-function 'my-erlang-find-tag-default)
  (if (string-match "XEmacs" emacs-version)
      (local-set-key [(shift return)]  'newline)
    (local-set-key [S-return]  'newline))

  ; Variables
  (turn-on-auto-fill)
  (setq auto-fill-function 'do-auto-fill)
  (setq fill-column 80)
  (setq adaptive-fill-mode nil) ; otherwise no indentation...
  (setq comment-indent-function 'my-erlang-comment-indent)
;  (setq imenu-extract-index-name-function 'my-erlang-get-imenu-entry)
  ;; This turned out to be a lot faster than erlang-get-imenu-entry
  (setq imenu-extract-index-name-function nil)
  (setq imenu-generic-expression my-erlang-imenu-generic-expression)
  (setq imenu-create-index-function 'my-imenu-create-index)
  (setq my-imenu-next-regexp '(concat "^\\(-type[	 ]*\\|define[ 	]*(\\)?\\??" (my-which-function) "[ 	]*[(,]"))

  ;;(add-to-list 'which-func-modes       'erlang-mode)
  (add-to-list 'erlang-electric-comma-criteria
               'erlang-electric-check-buffer-size)
  (make-local-variable 'font-lock-extend-region-functions)
  (add-hook 'font-lock-extend-region-functions 'my-font-lock-extend-region)
  ;;(font-lock-add-keywords nil '((my-spec-font-lock-matcher (0 font-lock-comment-face))))
  ;;(setq comment-start-skip "\\(^[ 	]*-[ 	]*spec\\(.*\\([^.]\\|\\(%.+\\)\\)[\n]\\)*[^.]+\\(\\.\\.+[^.]+\\)*\\.[	 ]*\\(%.+\\)*$\\)")
  ;;(setq comment-end-skip "\\.")
  (font-lock-add-keywords nil '(("\\(^[ 	]*-[ 	]*spec\\([^.]*\\(%.*\\)*[\n]\\)*[^.]*\.\\)" 0 font-lock-comment-face t)) t)
  ;;(font-lock-add-keywords nil '(("\\(^[ 	]*-[ 	]*spec\\(.*\\([^.]\\|\\(%.+\\)\\)[\n]\\)*[^.]+\\(\\.\\.+[^.]+\\)*\\.[	 ]*\\(%.+\\)*$\\)" 0 font-lock-comment-face t)) t)
  ;;(font-lock-add-keywords nil '(("\\(^[ 	]*-[ 	]*spec\\(.*\\([^.]\\|\\(%.+\\)\\)[\n]\\)*[^.]+\\(\\.\\.+[^.]+\\)*.\\)" 0 font-lock-comment-face t)) t)
  ;;(font-lock-add-keywords nil '(
  ;;                              ("^[ 	]*-[ 	]*spec[^.]*\\(\\(\\.\\.+[^.]+\\)*\\(%.+[\n].*\\)*\\)*\\.\\(%.*\\)*$" 0 font-lock-comment-face t)
  ;;                              ("^[ 	]*-[ 	]*spec[^\n]+\\.[	 ]*\\(%.*\\)*$" 0 font-lock-comment-face t)

  ;;                              t)
  ;;                        )
  (font-lock-add-keywords nil '(("^[ 	]*-[ 	]*spec.+\\.[	 ]*\\(%.*\\)?$" 0 font-lock-comment-face t)
;;"^[ 	]*-[ 	]*spec.*\n\\(\\(^[^.%\n]+$\\)\\|\\(^.+[^.%\n 	][	 ]*\\(%.*\\)?$\\)\n\\)*"
                                ("^[ 	]*-[ 	]*spec[^.]*\\(\\(\\.\\.+[^.]+\\)?\\(%.+[\n].*\\)?\\)*\\.\\(%.*\\)?$" 0 font-lock-comment-face t)

                                ;;("^[ 	]*-[ 	]*spec[^.]*\\(\\(\\.\\.+[^.]+\\)*\\(%.+[\n].*\\)*\\)*\\.\\(%.*\\)*$" 0 font-lock-comment-face t)
) t)
  )

(defun erlang-electric-check-buffer-size ()
  "Function to be used for 'erlang-electric-commands to stop this feature in
case buffer is too big"
  (if (> (buffer-size) 50000)
      'stop
    nil))

(defun my-compile-goto-error ()
  "In case looking at compilation error, follow compilation-error, otherwise \"normal\" return"
  (interactive)
    (condition-case nil
        (save-excursion
          (compile-goto-error))
      (error
       (my-send-return))))

(defun get-ct-name ()
  "Returns the component name"
  (interactive)
  (cond ((string-match "/\\(test_\\)\\([^/]+\\)/$" default-directory)
         ;; ../test_module/
         (match-string 2 default-directory))
        ((string-match "/\\([^/]+\\)/\\(test/\\)*$" default-directory)
         ;; module/test/
         (match-string 1 default-directory))
        )
  )

(defun bt-erl ()
  "This is just like running bt_erl in a normal shell, except that
an Emacs buffer is used for input and output.

The command line history can be accessed with  M-p  and  M-n.
The history is saved between sessions.

Entry to this mode calls the functions in the variables
`comint-mode-hook' and `erlang-shell-mode-hook' with no arguments.

The following commands imitate the usual Unix interrupt and
editing control characters:
\\{erlang-shell-mode-map}"
  (interactive)
  ;; Save org values
  (let* ((org-process inferior-erlang-process-name)
         (org-machine inferior-erlang-machine)
         (org-name inferior-erlang-buffer-name)
         (org-type inferior-erlang-shell-type)
         (org-opts inferior-erlang-machine-options)
         (test-module (get-ct-name))
         (bt-buffer-name (concat "*bt_erl<" test-module ">*"))
        )

    (if (get-buffer-process (get-buffer bt-buffer-name))
        ;; Shell already exists
        (switch-to-buffer bt-buffer-name)
      ;; New Shell
      (setq inferior-erlang-process-name "inferior-bt_erl")
      (setq inferior-erlang-machine "bt_erl")

      (setq inferior-erlang-buffer-name bt-buffer-name)

      (setq inferior-erlang-shell-type nil)
      (setq inferior-erlang-machine-options (list "-nowizard"))
      (erlang-shell)
      ;; Can't set before since erlang-shell/comint/fundamental-mode invokes kill-all-local-variables
      (setq-local comint-input-ring-file-name "~/.bt_history")
      (comint-read-input-ring t)

      (local-set-key [return] 'my-compile-goto-error)
      (local-set-key "\C-t"   'browse-last-test)

      (set (make-local-variable 'font-lock-defaults)
           '(compilation-mode-font-lock-keywords t))

      (font-lock-mode t)

      ;; Restore values
      (setq inferior-erlang-process-name org-process )
      (setq inferior-erlang-machine org-machine)
      (setq inferior-erlang-buffer-name org-name)
      (setq inferior-erlang-shell-type org-type)
      (setq inferior-erlang-machine-options org-opts))))


(defun my-ct-run-test-case ()
  "Use bt_run to run current test case."
  (interactive)
  ;; Imenu rescan in case new test case
  (imenu--cleanup)
  (setq imenu--index-alist nil)
  (imenu--make-index-alist)
  ;; end rescan
  (let* ((org-buffer (buffer-name)))
    (my-ct-run (concat "bt_run -p . " (erlang-get-module) " " (determine-tc)))
    (switch-to-buffer-other-window org-buffer))
  )

(defun my-ct-run-suite ()
  "Use bt_run to run current test SUITE."
  (interactive)
  (my-ct-run (concat "bt_run -c . " (erlang-get-module)))
  (delete-other-windows)
  )

(defun my-ct-run-all ()
  "Use bt_run to run all SUITES in current directory."
  (interactive)
  (my-ct-run "bt_run -c .")
  (delete-other-windows)
  )

(defun my-ct-run (cmd)
  "Help fun used for running bt_run"
  (interactive)
  (let ((new-buffer-name (concat "*bt_run<" (get-ct-name) ">*")))
    ;; Kill old buffer if already exists
    (if (get-buffer new-buffer-name)
        (kill-buffer new-buffer-name))
    (switch-to-buffer-other-window (buffer-name (compile cmd)))
    (make-local-variable 'compilation-skip-threshold)
    (setq compilation-skip-threshold 2)
    ;;;; Add this for recompile case...
    ;;(add-hook 'compilation-mode-hook (lambda () (setq compilation-skip-threshold 2)) t t)
    (rename-buffer new-buffer-name)
    (set-process-query-on-exit-flag 
     (get-buffer-process new-buffer-name) nil)
    (local-set-key "\C-t"   'browse-last-test)
    ;; Recompile kills all variables, so re-map
    ;;(local-set-key "\C-xm" (my-ct-run cmd))
    (goto-char (point-max))
    )
  )


(defun my-compile-test-module ()
  "Compile GTT module in case of GTT module. Otherwise runs `erlang-compile'."
  (interactive)
  (if (string-match "/test/gtt/" default-directory)
      (my-gtt-run (erlang-get-module) "{void,void}.")
    (erlang-compile)))

(defun my-run-test-case ()
  "Run GTT or CT test case."
  (interactive)
  (if (string-match "/test/gtt/" default-directory)
      (my-gtt-run-test-case)
    (my-ct-run-test-case)))

(defun my-run-suite ()
  "Run GTT or CT test SUITE."
  (interactive)
  (if (string-match "/test/gtt/" default-directory)
      (my-gtt-run-suite)
    (my-ct-run-suite)))

(defun my-run-all ()
  "Run GTT or CT ALL SUITES."
  (interactive)
  (if (string-match "/test/gtt/" default-directory)
      (my-gtt-run-suite)
    (my-ct-run-all)))

(defun determine-tc ()
  (let* ((function-name (my-which-function))
         (tc (if (listp function-name) (car function-name) function-name))
         (line (thing-at-point 'line t)))
    (if tc
        tc
      (if (string-match (concat "^[	 ]*\\(" erlang-atom-regexp "\\)[/1,	 ]*$") line)
          (match-string 1 line)))))

(defun my-gtt-run-test-case ()
  "Use gtt_execute:run_async to run current test case."
  (interactive)
  ;; Imenu rescan in case new test case
  (imenu--cleanup)
  (setq imenu--index-alist nil)
  (imenu--make-index-alist)
  ;; end rescan
  (my-gtt-run (erlang-get-module) (concat "gtt_execute:run_async({" (erlang-get-module) "," (determine-tc) "})."))
  )

(defun my-gtt-run-suite ()
  "Use gtt_execute:run_async to run current SUITE."
  (interactive)
  (my-gtt-run (erlang-get-module) (concat "gtt_execute:run_async(" (erlang-get-module) ")."))
  (delete-other-windows)
  )

(defun my-gtt-run (suite cmd)
  "Help fun used for running GTT test case"
  (interactive)
  (gtt)
  (goto-char (point-max))
  (insert (concat "l(" suite "),f(MyGttRef),{MyGttRef, _} = " cmd))
  (if my-term-shell-mode
      (term-send-input)
    (comint-send-input))
  (goto-char (point-max))
  )

(defun my-gtt-stop-test-case ()
  "Stops runnig GTT test cases(s) if any."
  (interactive)
  (goto-char (point-max))
  (insert "gtt_execute:stop(MyGttRef).")
  (if my-term-shell-mode
      (term-send-input)
    (comint-send-input))
  (goto-char (point-max))
  )

(defun browse-last-test ()
  "Opens last_test.html from last bt-erl run"
  (interactive)
  (let* ((result (if (file-readable-p "last_test.html") "last_test.html"))
         (result (if (file-readable-p ".ct_logs/index.html") ".ct_logs/index.html" result)))

    (if (not result)
        (message "No html-file found")
      (if (get-buffer-process (get-buffer "*lynx*"))
          (kill-buffer "*lynx*"))
      (browse-url result))))

(defun gtt-testcase-mode ()
  "Fix indentation etc for output from get_failing_gtt_tests.pl"
  (interactive)
  (goto-char (point-min))
  (erlang-mode)
  (perform-replace "," "," nil nil nil)
  (goto-char (point-min))
  (perform-replace "[" "[" nil nil nil)
  (goto-char (point-min))
  (perform-replace "]" "]" nil nil nil)
  (mark-whole-buffer)
  (call-interactively 'indent-region))

(defun gtt-make-async ()
  "Make function call async"
  (interactive)
  (beginning-of-line)
  (if (re-search-forward "\\( *\\)\\(.*\\):\\(.*\\)(\\(.*\\)).*" nil t)
    (replace-match "\\1{\\2, \\3, [\\4]}," nil nil)))

(defun gtt-make-sync ()
  "Make function call sync"
  (interactive)
  (beginning-of-line)
  (if (re-search-forward "{ *\\(.*\\), *\\(.*\\), *\\[\\(.*\\)\\]}.*" nil t)
    (replace-match "\\1:\\2(\\3)," nil nil)))

(defun to_erl (pipe &optional inputname historyfile is-tbox is-ncb)
  (interactive "spipe: ")
  (let* ((name (if inputname
                   inputname
                 pipe))
         (to_erl_name (make-process-buffer-name name)))
    (if (get-process name)
        (switch-to-buffer to_erl_name)
      (if is-tbox
          (tbox-make-comint name "erl" is-ncb)
        (make-comint name "to_erl" nil pipe))
      (switch-to-buffer to_erl_name)
      (if is-tbox
          (add-hook 'comint-preoutput-filter-functions 'my-tbox-strip-cshrc-echos nil t))
      ;; Don't use compilation
      ;; Why not - what did I mean with this?
      ;;(make-local-variable 'inferior-erlang-use-cmm)
      ;;(setq inferior-erlang-use-cmm nil)
      (erlang-shell-mode)
      (if (and historyfile (file-readable-p historyfile))
          (progn
            (setq-local comint-input-ring-file-name historyfile)
            (comint-read-input-ring t)))
      ;; Don't complete filename
      (setq-local comint-dynamic-complete-functions
            (append (list 'comint-replace-by-expanded-history 'my-erlang-send-tab)))
      (make-local-variable     'find-tag-default-function)
      (setq-local find-tag-default-function 'my-erlang-find-tag-default)
      (setq-local comint-process-echoes t))))

(defun tbox_to_erl (pipe &optional inputname historyfile is-ncb)
  (to_erl pipe inputname historyfile "tbox" is-ncb))

;; Seems term-scroll-with-delete is re-set by some term-set-scroll-region...
;;(advice-add 'term-set-scroll-region :filter-return
;;            #'(lambda (r)
;;                (if (and (boundp 'my-term-shell-mode) my-term-shell-mode)
;;                    (setq term-scroll-with-delete nil))
;;                r))
(defadvice term-set-scroll-region
  (after term-set-scroll-region-set-delete (TOP BOTTOM))
  "Fix so that `term-scroll-with-delete' is unset in term-shell-mode"
  (if (and (boundp 'my-term-shell-mode) my-term-shell-mode)
      (setq term-scroll-with-delete nil)))
(ad-activate 'term-set-scroll-region)

;; Strip surrounding space from input
(defun my-strip-input (&rest r)
  (let* ((r (car r))
         (ring (car r))
         (r (cdr r))
         (item (car r))
         (r (cdr r))
         )
    (if (and (boundp 'my-term-shell-mode) my-term-shell-mode (stringp item))
        (setq item (replace-regexp-in-string "\\(^[	 ]+\\|[ 	]+$\\)" "" item nil nil 1)))
    (append (list ring) (list item) r)))

;;(advice-add 'ring-insert :filter-args #'my-strip-input)

(defadvice ring-insert
  (before ring-insert-strip-spaces (&rest r))
  "Remove surrounding white spaces before insert input to history - see `my-strip-input'"
  (ad-set-arg 1 (nth 1 (my-strip-input r))))
(ad-activate 'ring-insert)

(defun gtt ()
  (interactive)
  (if (and (not (file-readable-p "/tmp/gtt.fifo")) (file-readable-p "/tmp/erlang.pipe.1.r"))
      ;; In old days NCB and GTT shared erlang node
      (to_erl "/tmp/erlang.pipe.1" "GTT" "~/.gtt_history")
    (if (file-readable-p "/tmp/gtt.fifo")
        (to_erl "/tmp/gtt" "GTT" "~/.gtt_history")
      ;;(if (string-match ".fifo" (tbox-cmd-to-string "ls /tmp/gtt"))
      ;;    (tbox_to_erl "/tmp/gtt" "GTT" "~/.gtt_history")
      ;;(let ((tbox_host (shell-command-to-string "cat $tecsas/TECSAS_HOST_ADDRESS | sed 's/^[0-9.]* //g'")))
      (tbox-screen "GTT" "GTT" "~/.gtt_history"))
    )
;  (set-background-color           "Goldenrod")
;  (set-foreground-color           "black")
;  (set-cursor-color               "black")
;  (set-mouse-color                "black")
  (set (make-local-variable 'my-term-keymap) (copy-keymap (current-local-map)))
  (use-local-map my-term-keymap)
  (local-set-key "\C-xr" 'gtt)
  (local-set-key "\C-xq" 'my-gtt-stop-test-case)
  ;; Or should we cd to tbox instead?
  (cd (tecsas-dir))
)

(defadvice term-handle-exit
  (after term-handle-exit-fix-keys (PROCESS-NAME MSG))
  "Fix so that \"\\C-xr\" works after process exists"
  (if (boundp 'my-term-keymap)
      (use-local-map my-term-keymap)))
(ad-activate 'term-handle-exit)

(defun tecsas ()
  (interactive)
  (if (file-readable-p "/tmp/erlang.pipe.1.r")
      (to_erl "/tmp/erlang.pipe.1" "Tecsas" "~/.tecsas_history")
    (tbox_to_erl "/tmp/erlang.pipe.1" "Tecsas" "~/.tecsas_history" "ncb"))
  (make-local-variable 'kill-buffer-hook)
  (add-hook 'kill-buffer-hook 'kill-hook-comint-send-eof)
  (set (make-local-variable 'my-term-keymap) (copy-keymap (current-local-map)))
  (use-local-map my-term-keymap)
  (local-set-key "\C-xr" 'tecsas)
  (cd (tecsas-dir)))

(defun tecsas-dir ()
  (let ((tecsas-dir (or (getenv "tecsas") (fix-tecsas-env))))
    (if (not tecsas-dir)
        (error "Tecsas ENV not set")
      tecsas-dir)))

(defun kill-hook-comint-send-eof()
  "Manage that process is dead"
  (condition-case nil
      (comint-send-eof)
    (error
     nil)))

(require 'shell)
(require 'dabbrev)
(defun gsh ()
  (interactive)
  (let* ((name "gsh")
         (proc-name (make-process-buffer-name name)))
    (if (get-process name)
        (switch-to-buffer proc-name)
      (if (file-readable-p "/tmp/erlang.pipe.1.r")
          (make-comint name "gsh")
        (fix-tecsas-env)
        (tbox-make-comint name "gsh" "ncb"))
      (switch-to-buffer proc-name)
      (if (not (file-readable-p "/tmp/erlang.pipe.1.r"))
          (add-hook 'comint-preoutput-filter-functions 'my-tbox-strip-cshrc-echos nil t))
      (shell-mode)
      (make-local-variable 'dabbrev-abbrev-skip-leading-regexp)
      (setq-local dabbrev-abbrev-skip-leading-regexp ".*>")
      (setq-local comint-input-ring-file-name "~/.gsh_history")
      (comint-read-input-ring)
      (setq-local comint-process-echoes t))))

(defun yang ()
  (interactive)
  (let* ((name "yang")
         (yang-buffer-name (make-process-buffer-name name)))
    (if (get-process name)
        (switch-to-buffer yang-buffer-name)
      (if (get-buffer yang-buffer-name)
          (kill-buffer yang-buffer-name))
      (let ((yang-ip (get-yang-ip)))

      (tbox-make-term name (concat "ssh -l epg_cm " yang-ip " -p 2222") nil nil "~/.yang_history")
      (setq-local term-prompt-regexp "^\\([^@]+@[^#]+#\\)")

      (while (not (string-match "\\([Pp]assword:\\|fingerprint\\)" (buffer-string)))
        (sleep-for 0 500))

      (if (string-match "fingerprint" (buffer-string))
          (term-send-string (get-buffer-process (current-buffer)) "yes\n"))

      (while (not (string-match "[Pp]assword:" (buffer-string)))
        (sleep-for 0 500))
      (term-send-string (get-buffer-process (current-buffer)) "epg_cm\n")
      ))))

(defun gl ()
  (interactive)
  (let* ((newgldir (concat (tecsas-dir) "/logs/ncs_trace"))
         (gldir (if (file-readable-p newgldir)
                    newgldir
                  (concat (tecsas-dir) "/logs")))
         (cwd default-directory))
    (cd gldir)
    (shell-command "gl")
    (if cwd (cd cwd))
    (find-file (concat gldir "/tnt_merged.log"))))

(defun fix-tecsas-env ()
  (interactive)
  (update-tecsas-env-from-tbox)
  (getenv "tecsas"))

(defun update-tecsas-env-from-tbox ()
  (if (equal (tbox-session) tbox-container-session)
      (setenv "tecsas" (concat "/tbox-pod:" (get-ncb-pod) "@" (tbox-session) ":/"))
    (setenv "tecsas" (get-tbox-installation))))

(defvar my-diaspec-imenu-generic-expression
  `(
    ;; Messages
    (nil ,"^[ \t]*<[ \t]*\\([^ \t]+\\)[ \t]*>[ \t]*::=" 1)
    ;; Grouped AVPs
    (nil ,"^[ \t]*\\([^ \t<>]+\\)[ \t]*::=" 1)
    ;; Enums
    (nil ,"^[ \t]*\\([A-Z0-9_-]+\\)[ \t]*([ \t]*[0-9]+[ \t]*)" 1))

  "Imenu generic expression for DiaSpec mode.  See `imenu-generic-expression'.")
(defvar my-diaspec-font-lock
  (list
   (list "^\\s *\\(@[a-zA-Z0-0_-]+\\)\\([^\n]*\\)?\n"
         (list 1
               (if (boundp 'font-lock-preprocessor-face)
                   'font-lock-preprocessor-face ;; Seems new in emacs 22 or something.
                 'font-lock-function-name-face)) (list 2 font-lock-variable-name-face))
   (list "^[ \t]*<*[ \t]*\\([^ \t\n]+\\)[ \t]*>*[ \t]*::=" 1 font-lock-function-name-face t)
   (list "^[ \t]*\\([^(\n]+\\)[ \t]*([ \t]*\\([0-9]+\\)[ \t]*)"
         (list 1 'font-lock-type-face) (list 2 'font-lock-constant-face))
   ))

(defvar diaspec-syntax-table nil)
(defun diaspec-mode ()
  "Mode of *.diaSpec"
  (interactive)
  (kill-all-local-variables)
  (setq major-mode 'diaspec-mode)
  (setq mode-name "diaSpec")

  (setq diaspec-syntax-table (make-syntax-table (syntax-table)))
  (modify-syntax-entry ?; "<" diaspec-syntax-table)
  (modify-syntax-entry ?\n ">" diaspec-syntax-table)
  (set-syntax-table diaspec-syntax-table)

  (set (make-local-variable 'comment-start) ";")
  (set (make-local-variable 'comment-start-skip) "%+\\s ;")
  (set (make-local-variable 'font-lock-defaults)
       '(my-diaspec-font-lock nil nil ((?_ . "w"))))
  (set (make-local-variable 'imenu-generic-expression)
       my-diaspec-imenu-generic-expression))

;;; End .emacs_erlang
